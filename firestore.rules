rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /birthday/{id} {
      function isValidNotifyAtBefore(val) {
        return val is list && val.size() >= 1 && val.hasOnly(['30m', '1h', '6h', '1d', '3d', '7d', '1M'])
      }
      function isValidNotifyChannel(channelId) {
        return exists(/databases/$(database)/documents/notificationChannel/$(channelId));
      }
      function isValidNotifyChannels(val) {
        return val is list 
          && val.size() >= 1 && isValidNotifyChannel(val[0])
          && (val.size() == 2 ? isValidNotifyChannel(val[1]) : true)
          && (val.size() == 3 ? isValidNotifyChannel(val[2]) : true)
          && (val.size() == 4 ? isValidNotifyChannel(val[3]) : true)
          && (val.size() == 5 ? isValidNotifyChannel(val[4]) : true)
          && (val.size() == 6 ? isValidNotifyChannel(val[5]) : true);
      }
      function validateDoB(val) {
        return verifyObjectFieldsPresence(val, ['year', 'month', 'day'], [])
          && val.year >= 1920 && val.year <= request.time.year()
          && val.month >= 0 && val.month <= 11
          && val.day >= 1 && val.day <= 31;
      }
      function validateNotificationSettings(val) {
        return val == null ? true : (
          verifyObjectFieldsPresence(val, ['notifyChannelsIds', 'notifyAtBefore', 'timeZone'], [])
          && isValidNotifyChannels(val.notifyChannelsIds)
          && isValidNotifyAtBefore(val.notifyAtBefore)
          && isValidString(val.timeZone, 1, 30)
        );
      }
      function validateBuddyName(val) {
        return isValidString(val, 1, 30);
      }
      function validateBuddyDescription(dataObj) {
        return isOptionalValidString(dataObj, 'buddyDescription', 0, 100)
      }

      allow read: if existingData().profileId == request.auth.uid;
      allow delete: if existingData().profileId == request.auth.uid;
      allow create: if
        verifyFieldsPresence([
          'profileId',
          'birth',
          'buddyName',
          'notificationSettings',
          'createdAt'
        ], ['buddyDescription']) 
        && newData().profileId == request.auth.uid
        && validateDoB(newData().birth)
        && validateBuddyName(newData().buddyName)
        && validateBuddyDescription(newData())
        && validateNotificationSettings(newData().notificationSettings)
        && isValidTimestamp(newData().createdAt);
      allow update: if
        updatingOnlyFields([
          'birth',
          'buddyName',
          'buddyDescription',
          'notificationSettings'
        ]) 
        && existingData().profileId == request.auth.uid
        && validateDoB(newData().birth)
        && validateBuddyName(newData().buddyName)
        && validateBuddyDescription(newData())
        && validateNotificationSettings(newData().notificationSettings);
    }

    match /profile/{id} {
      function validateDisplayName(val) {
        return isValidString(val, 1, 30);
      }

      allow read, delete: if id == request.auth.uid;
      allow update: if id == request.auth.uid 
        && updatingOnlyFields(['displayName', 'timeZone', 'locale'])
        && validateDisplayName(newData().displayName)
        && isOptionalValidString(newData(), 'timeZone', 1, 30)
        && newData().keys().hasAny(['locale']) ? newData().locale in ['en', 'uk', 'ru'] : true;
    }

    match /notification/{id} {
      allow read: if existingData().profileId == request.auth.uid;
      allow create, delete, update: if false;
    }

    match /notificationChannel/{id} {
      allow read, delete: if existingData().profileId == request.auth.uid;
      allow create, update: if false;
    }

    match /{document=**} {
      allow write: if false;
      allow read: if false;
    }

    function newData() {
      return request.resource.data;
    }
    function existingData() {
      return resource.data;
    }
    function verifyObjectFieldsPresence(mapObj, requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return mapObj is map && mapObj.keys().hasAll(requiredFields) && mapObj.keys().hasOnly(allFields);
    }
    function verifyFieldsPresence(requiredFields, optionalFields) {
      return verifyObjectFieldsPresence(request.resource.data, requiredFields, optionalFields);
    }
    function isValidString(data, minSize, maxSize) {
      return data is string && data != '' && data.size() >= minSize && data.size() <= maxSize;
    }
    function isOptionalValidString(data, field, minSize, maxSize) {
      return data.keys().hasAny([field]) ? isValidString(data[field], minSize, maxSize) : true;
    }
    function updatingOnlyFields(allowedFields) {
      let affectedKeys = resource.data.diff(request.resource.data).affectedKeys(); 
    	return affectedKeys.hasOnly(allowedFields);
    }
    function isValidTimestamp(value) {
       // todo write regex to validate ISO format
      return value is string;
    }
  }
}